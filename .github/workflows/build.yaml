name: Build, Test & Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
        continue-on-error: true
        id: install
      
      - name: Comment on PR if installation failed
        if: ${{ failure() && steps.install.outcome == 'failure' && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Package installation failed**\nPlease check the dependency issues in your PR.'
            })
      
      - name: Lint code
        run: bun run lint
        continue-on-error: true
        id: lint
      
      - name: Comment on PR if linting failed
        if: ${{ steps.lint.outcome == 'failure' && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Linting failed**\nYour code has linting errors. Please fix them before merging.'
            })
      
      - name: Run tests
        run: bun run test
        continue-on-error: true
        id: test
      
      - name: Comment on PR if tests failed
        if: ${{ steps.test.outcome == 'failure' && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Tests failed**\nSome tests are failing in your PR. Please fix them before merging.'
            })
      
      - name: Build package
        run: bun run build
        continue-on-error: true
        id: build
      
      - name: Comment on PR if build failed
        if: ${{ steps.build.outcome == 'failure' && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Build failed**\nThe package failed to build. Please fix build errors before merging.'
            })
      
      - name: Check if any steps failed
        id: check-failed-steps
        if: ${{ steps.install.outcome == 'failure' || steps.lint.outcome == 'failure' || steps.test.outcome == 'failure' || steps.build.outcome == 'failure' }}
        run: exit 1
      
      - name: Comment on PR if all checks passed
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **All checks passed**\nLinting, tests, and build have all completed successfully.'
            })

  publish-npm:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Build package
        run: bun run build || echo "No build script, skipping"
      
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Update package version
        run: |
          jq ".version = \"$VERSION\"" package.json > package.json.tmp
          mv package.json.tmp package.json
      
      - name: Setup .npmrc for GitHub Packages
        run: |
          echo "@packt:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> .npmrc
      
      - name: Publish to GitHub Packages
        run: bun publish --access=public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
